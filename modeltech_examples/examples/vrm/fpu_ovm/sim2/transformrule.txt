#--- This is an example of a transform rule that 
#    can be used to transform messages generated by the test environment
#    to useful information that can aid in sorting / categorizing
#    messages. Ultimately this allows you to quickly identify failure
#    types and their characteristics.
#    -GC
#--- 


#---
# Rule 1: This rule transforms OVM messages with with string "GLOBAL" on that line
#       so that the entire message is replaced by the single string GLOBAL 
#       Additional fields and their values are created using values extracted from the 
#       original message      
#---
transform {(.*)([ ]+)GLOBAL(.*)$} -name ovmglobal {
        field msg {GLOBAL}
        field severity {Note}
        field time {0}
        field instance {$1}
        field details {$3}
}

#---
# Rule 2 :This example of a tranform rule is used to extract correct FPU operation, operand data 
#         and result from OVM INFO messages emitted by the comparator in this example
#---

transform {OVM_INFO(.*?) @ (\d+): ([a-zA-Z_.]+) ([[][^]]*[]]) Comparator Match: a=([a-zA-Z0-9\-\+.]+), b=([a-zA-Z0-9\-\+.]+), op=([a-zA-Z_]+), round=([a-zA-Z_]+), result = ([a-zA-Z0-9\-\+.]+) with status =([0-1.]+)(.*)$} -name ovminfo {
        field msg {Comparator Match: <a> <b> <op> <round> <result> <status>}
        field severity {Note}
        field a_rsp {$5}
        field b_rsp {$6}
        field op_rsp {$7}
        field round_rsp {$8}
        field result_rsp {$9}
	field status_rsp {$10}
	#
        field a_req {$5}
        field b_req {$6}
        field op_req {$7}
        field round_req {$8}
        field result_req {$9}
	field status_req {$10}
	#
        field time {$2}
        field instance {$3}
        field origin {[regsub -all {[][]} $4 {}]}
}

#---
# Rule 3: This tranform rule is similar to Rule 2 except that it is used to extract 
#         incorrect FPU operation, operand data and result from OVM ERROR messages 
#         emitted by the comparator
#---
transform {OVM_ERROR(.*?) @ (\d+): ([a-zA-Z_.]+) ([[][^]]*[]]) Comparator Mismatch: DUT response a=([a-zA-Z0-9\-\+.]+), b=([a-zA-Z0-9\-\+.]+), op=([a-zA-Z_]+), round=([a-zA-Z_]+), result = ([a-zA-Z0-9\-\+.]+) with status =([0-1.]+), differs from REF-model response a=([a-zA-Z0-9\-\+.]+), b=([a-zA-Z0-9\-\+.]+), op=([a-zA-Z_]+), round=([a-zA-Z_]+), result = ([a-zA-Z0-9\-\+.]+) with status =([0-1.]+)(.*)$} -name ovmerror1 {
        field msg {Comparator Mismatch: DUT resp. vs TB req.}
        field severity {Error}
	#
        field a_rsp {$5}
        field b_rsp {$6}
        field op_rsp {$7}
        field round_rsp {$8}
        field result_rsp {$9}
	field status_rsp {$10}
	#
        field a_req {$11}
        field b_req {$12}
        field op_req {$13}
        field round_req {$14}
        field result_req {$15}
	field status_req {$16}
	#
        field time {$2}
        field instance {$3}
        field details {$17}
        field origin {[regsub -all {[][]} $4 {}]}
}



#---
# Rule 4: This transform rule extracts all remaining OVM INFO messages, transforms the message
#       and creates additional fields that are populated with values extracted from 
#       the original message      
#---
transform {OVM_INFO(.*?) @ (\d+): ([a-zA-Z_.]+) ([[][^]]*[]]) (.*)$} -name ovminfo_default {
        field msg {$3 $4 $5}
        field severity {Note}
        field time {$2} 
        field instance {$3}
        field OvmMsgId {[regsub -all {[][]} $4 {}]}       
}

#---
# Rule 5: This transform rule extract all remaining OVM WARNING messages, transforms the message 
#         and creates additional fields that are populated with values extracted from 
#         the original message
#---
transform {OVM_WARNING(.*?) @ (\d+): ([a-zA-Z_.]+) ([[][^]]*[]]) (.*)$} -name ovmwarning_default {
        field msg {$3 $4 $5}
        field severity {Warning}
        field time {$2}
        field instance {$3}
        field OvmMsgId {[regsub -all {[][]} $4 {}]}
}

#---
# Rule 6: This transform rule extract all remaining OVM ERROR messages, transforms the message 
#         and creates additional fields that are populated with values extracted from 
#         the original message
#---
transform {OVM_ERROR(.*?) @ (\d+): ([a-zA-Z_.]+) ([[][^]]*[]]) (.*)$} -name ovmerror_default {
        field msg {$3 $4 $5}
        field severity {Error}
        field time {$2}
        field instance {$3}
        field OvmMsgId {[regsub -all {[][]} $4 {}]}
}

#---
# Rule 7: This transform rule extracts SVA assertion firing messages and transforms and the message
#         as well as store addition information
#---
transform {(.*?)Assertion error(.*)$} -name assertionerror {
        field msg {Assertion error}
        field severity {Error}
        field time {0}
        field details {Assertion Error. $1}
}

#---
# Rule 8: The transform rules provide a mechanism to exclude some types of messages from
#         being stored in the database. This example takes all other messages not 
#         covered by the rules above and sets severity field to value Disregard.
#         These messages will be disregarded during the database creation process 
#---
transform {(.*)$} -name ignore {
        field msg {IGNORE}
        field severity {Disregard}
        field details {$1}
}
